<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- blojsom                                                                 -->
<!-- ======================================================================= -->
<project name="blojsom" default="compile" basedir=".">

    <property name="name" value="blojsom"/>
    <property name="version" value="3.3"/>

    <property name="distro.dir" value="${basedir}/distro"/>
    <property name="war.file" value="${distro.dir}/${name}.war"/>
    <property name="compile.dir" value="${basedir}/classes"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="plugins.src.dir" value="${basedir}/plugins/src"/>
    <property name="extensions.src.dir" value="${basedir}/extensions/src"/>
    <property name="test.src.dir" value="${basedir}/test/src"/>
    <property name="war.dir" value="${basedir}/war"/>
    <property name="resources.dir" value="${war.dir}/resources"/>
    <property name="webinf.dir" value="${war.dir}/WEB-INF"/>
    <property name="webinf.classes.dir" value="${webinf.dir}/classes"/>
    <property name="webinf.lib.dir" value="${webinf.dir}/lib"/>
    <property name="build.dir" value="${webinf.dir}/classes"/>
    <property name="docs.dir" value="${basedir}/docs"/>
    <property name="javadoc.dir" value="${docs.dir}/content/javadoc"/>
    <property name="javadoc.zip" value="${distro.dir}/${name}-javadocs.zip"/>
    <property name="velocidoc.dir" value="${basedir}/velocidoc"/>
    <property name="ant.lib.dir" value="${basedir}/ant-lib"/>
    <property name="velocidoc.zip" value="${distro.dir}/${name}-velocidocs.zip"/>
    <property name="pagemacros.dir" value="${basedir}/plugins/src/org/blojsom/plugin/velocity"/>
    <property name="properties.dir" value="${basedir}/properties"/>
    <property name="templates.dir" value="${basedir}/templates"/>
    <property name="templates.resources.dir" value="${templates.dir}/resources"/>
    <property name="themes.dir" value="${basedir}/themes"/>
    <property name="default.theme.dir" value="${themes.dir}/asual/"/>
    <property name="default.theme.templates.dir" value="${default.theme.dir}/templates/"/>
    <property name="default.theme.resources.dir" value="${default.theme.dir}/resources/"/>
    <property name="core.jar" value="${webinf.lib.dir}/${name}-core-${version}.jar"/>
    <property name="resources.jar" value="${webinf.lib.dir}/${name}-resources-${version}.jar"/>
    <property name="plugins.jar" value="${webinf.lib.dir}/${name}-plugins-${version}.jar"/>
    <property name="plugins-templates.jar" value="${webinf.lib.dir}/${name}-plugins-templates-${version}.jar"/>
    <property name="extensions.jar" value="${webinf.lib.dir}/${name}-extensions-${version}.jar"/>
    <property name="templates.jar" value="${webinf.lib.dir}/${name}-templates-${version}.jar"/>
    <property name="javadocs.zip" value="${distro.dir}/${name}-javadocs.zip"/>
    <property name="tinymce.dir" value="${war.dir}/administration/tiny_mce"/>
    <property name="default.blog" value="default"/>
    <property name="default.blog.dir" value="blogs/default"/>
    <property name="bootstrap.blog" value="bootstrap"/>
    <property name="bootstrap.blog.dir" value="blogs/bootstrap"/>
    <property name="sql.scripts.dir" value="${basedir}/sql-scripts"/>
    <property name="source.version" value="1.4"/>
    <property name="target.version" value="1.4"/>

    <!-- Tomcat deployment target properties -->
    <property name="manager.url" value="http://localhost:8080/manager"/>
    <property name="manager.username" value="username"/>
    <property name="manager.password" value="password"/>
    <property name="app.path" value="/${name}"/>
    <property name="build.home" value="${war.dir}"/>

    <!-- Add-on properties -->
    <property name="addon.lib.dir" value="${basedir}/addon-lib"/>

    <property name="addon.extensions.src.dir" value="${basedir}/addon/extensions/src"/>
    <property name="addon.plugins.src.dir" value="${basedir}/addon/plugins/src"/>
    <property name="addon.core.src.dir" value="${basedir}/addon/core/src"/>

    <property name="addon.core.jar" value="${webinf.lib.dir}/${name}-addon-core-${version}.jar"/>
    <property name="addon.plugins.jar" value="${webinf.lib.dir}/${name}-addon-plugins-${version}.jar"/>
    <property name="addon.extensions.jar" value="${webinf.lib.dir}/${name}-addon-extensions-${version}.jar"/>
    <property name="addon.resources.jar" value="${webinf.lib.dir}/${name}-addon-resources-${version}.jar"/>

    <!-- Upgrade properties -->
    <property name="upgrade.lib.dir" value="${basedir}/upgrade-lib"/>
    <property name="upgrade.src.dir" value="${basedir}/upgrade/src"/>
    <property name="upgrade.jar" value="${webinf.lib.dir}/${name}-upgrade-utility-${version}.jar"/>

    <property name="debug" value="on"/>
    <property name="deprecation" value="on"/>
    <property name="optimize" value="on"/>

    <!-- =================================================================== -->
    <!-- Classpath                                                           -->
    <!-- =================================================================== -->
    <path id="build.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${webinf.lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${addon.lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${upgrade.lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- =================================================================== -->
    <!-- Sourcepath (for javadoc)                                            -->
    <!-- =================================================================== -->
    <path id="source.path">
        <pathelement path="${src.dir}"/>
        <pathelement path="${plugins.src.dir}"/>
        <pathelement path="${extensions.src.dir}"/>
        <pathelement path="${addon.core.src.dir}"/>
        <!-- <pathelement path="${addon.extensions.src.dir}"/> -->
        <pathelement path="${addon.plugins.src.dir}"/>
    </path>

    <!-- =================================================================== -->
    <!-- Prepares the build process                                          -->
    <!-- =================================================================== -->
    <target name="prepare"
            description="Prepares the build by creating necessary directories and copying necessary files">
        <tstamp/>
        <mkdir dir="${compile.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${distro.dir}"/>
        <copy todir="${build.dir}">
            <fileset dir="${properties.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>

        <!-- Copy general templates for default user -->
        <mkdir dir="${war.dir}/WEB-INF/${default.blog.dir}/templates/"/>
        <copy todir="${war.dir}/WEB-INF/${default.blog.dir}/templates/">
            <fileset dir="${templates.dir}">
                <include name="**/*.vm"/>
                <exclude name="**/html*.vm"/>
            </fileset>
        </copy>

        <!-- Copy general templates for bootstrap user -->
        <mkdir dir="${war.dir}/WEB-INF/${bootstrap.blog.dir}/templates/"/>
        <copy todir="${war.dir}/WEB-INF/${bootstrap.blog.dir}/templates/">
            <fileset dir="${templates.dir}">
                <include name="**/*.vm"/>
                <exclude name="**/html*.vm"/>
            </fileset>
        </copy>

        <!-- Copy theme templates and resources for default user -->
        <mkdir dir="${resources.dir}/${default.blog}"/>
        <copy todir="${war.dir}/WEB-INF/${default.blog.dir}/templates">
            <fileset dir="${default.theme.templates.dir}"/>
        </copy>
        <copy todir="${resources.dir}/${default.blog}">
            <fileset dir="${templates.resources.dir}"/>
        </copy>
        <copy todir="${resources.dir}/${default.blog}">
            <fileset dir="${default.theme.resources.dir}"/>
        </copy>

        <!-- Copy theme templates and resources for bootstrap user -->
        <mkdir dir="${war.dir}/WEB-INF/${bootstrap.blog.dir}/resources/"/>
        <copy todir="${war.dir}/WEB-INF/${bootstrap.blog.dir}/templates">
            <fileset dir="${default.theme.templates.dir}"/>
        </copy>
        <copy todir="${war.dir}/WEB-INF/${bootstrap.blog.dir}/resources/">
            <fileset dir="${templates.resources.dir}"/>
        </copy>
        <copy todir="${war.dir}/WEB-INF/${bootstrap.blog.dir}/resources/">
            <fileset dir="${default.theme.resources.dir}"/>
        </copy>

        <!-- Copy the SQL scripts -->
        <copy todir="${build.dir}">
            <fileset dir="${sql.scripts.dir}"/>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- Cleans up generated stuff                                           -->
    <!-- =================================================================== -->
    <target name="clean" description="Removes generated files from the build">
        <delete dir="${compile.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${docs.dir}"/>
        <delete dir="${velocidoc.dir}"/>
        <delete dir="${distro.dir}"/>
        <delete dir="${build.dir}"/>
        <delete>
            <fileset dir="${webinf.lib.dir}" includes="${name}-*.jar"/>
            <fileset dir="${webinf.lib.dir}" includes="hsqldb.jar"/>
        </delete>
        <delete file="${war.file}"/>
        <delete dir="${webinf.dir}/themes"/>
    </target>

    <!-- =================================================================== -->
    <!-- Cleans up generated stuff                                           -->
    <!-- =================================================================== -->
    <target name="clean-with-templates" description="Removes generated files from the build">
        <delete dir="${compile.dir}"/>
        <delete dir="${build.dir}"/>
        <delete dir="${docs.dir}"/>
        <delete dir="${velocidoc.dir}"/>
        <delete dir="${distro.dir}"/>
        <delete dir="${build.dir}"/>
        <delete>
            <fileset dir="${webinf.lib.dir}" includes="${name}-*.jar"/>
        </delete>
        <delete file="${war.file}"/>
        <delete dir="${webinf.dir}/themes"/>
        <delete dir="${war.dir}/WEB-INF/${default.blog.dir}" includeemptydirs="true"/>
        <delete dir="${war.dir}/WEB-INF/${bootstrap.blog.dir}" includeemptydirs="true"/>
        <delete dir="${resources.dir}/${default.blog}" includeemptydirs="true"/>
        <delete dir="${resources.dir}/${bootstrap.blog}" includeemptydirs="true"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source code                                            -->
    <!-- =================================================================== -->
    <target name="compile" depends="prepare" description="Compiles the core, plugin, and extensions">
        <!-- Core -->
        <javac srcdir="${src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <jar file="${core.jar}" basedir="${compile.dir}"/>

        <!-- Plugins -->
        <delete dir="${compile.dir}"/>
        <mkdir dir="${compile.dir}"/>
        <javac srcdir="${plugins.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <jar file="${plugins.jar}" basedir="${compile.dir}"/>

        <!-- Plugins templates -->
        <jar file="${plugins-templates.jar}" basedir="${plugins.src.dir}" includes="**/*.vm"/>

        <!-- Extensions -->
        <delete dir="${compile.dir}"/>
        <mkdir dir="${compile.dir}"/>
        <javac srcdir="${extensions.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               excludes="**/Test*"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <jar file="${extensions.jar}" basedir="${compile.dir}"/>

        <!-- Resources -->
        <delete dir="${compile.dir}"/>
        <mkdir dir="${compile.dir}"/>
        <copy todir="${compile.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        <copy todir="${compile.dir}">
            <fileset dir="${extensions.src.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        <copy todir="${compile.dir}">
            <fileset dir="${plugins.src.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        <jar file="${resources.jar}" basedir="${compile.dir}"/>

        <delete dir="${compile.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source code and does not delete nor jar. For Testing   -->
    <!-- =================================================================== -->
    <target name="compile-for-testing" depends="prepare" description="Compiles the class files">
        <!-- Core -->
        <javac srcdir="${src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <javac srcdir="${plugins.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <javac srcdir="${extensions.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <!--
        <javac srcdir="${test.src.dir}"
            destdir="${compile.dir}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"
            source="${source.version}"
            target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        -->
        <javac srcdir="${addon.core.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <javac srcdir="${addon.plugins.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the add-on source code                                     -->
    <!-- =================================================================== -->
    <target name="compile-addon" depends="compile" description="Compiles the add-on core, extensions, and plugins">
        <!-- Add-on core -->
        <delete dir="${compile.dir}"/>
        <mkdir dir="${compile.dir}"/>
        <javac srcdir="${addon.core.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <jar file="${addon.core.jar}" basedir="${compile.dir}"/>
        <delete dir="${compile.dir}"/>

        <!-- Add-on plugins -->
        <delete dir="${compile.dir}"/>
        <mkdir dir="${compile.dir}"/>
        <javac srcdir="${addon.plugins.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <copy todir="${compile.dir}">
            <fileset dir="${addon.plugins.src.dir}" includes="**/*.vm"/>
        </copy>
        <jar file="${addon.plugins.jar}" basedir="${compile.dir}"/>
        <delete dir="${compile.dir}"/>

        <!-- Add-on extensions -->
        <!--
        <delete dir="${compile.dir}"/>
        <mkdir dir="${compile.dir}"/>
        <javac srcdir="${addon.extensions.src.dir}"
            destdir="${compile.dir}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"
            source="${source.version}"
            target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <jar file="${addon.extensions.jar}" basedir="${compile.dir}"/>
        <delete dir="${compile.dir}"/>
        -->
    </target>

    <!-- =================================================================== -->
    <!-- Create the war file                                                 -->
    <!-- =================================================================== -->
    <target name="war" depends="clean-with-templates, compile" description="Create a deployable WAR file">
        <copy todir="${war.dir}/WEB-INF/themes">
            <fileset dir="${themes.dir}"/>
        </copy>

        <!-- Uncomment this if you want to JAR up the templates for running blojsom from a WAR file (i.e. a packed WAR) -->
        <!-- <jar jarfile="${templates.jar}" basedir="${templates.dir}"/> -->

        <jar jarfile="${war.file}" basedir="${war.dir}">
            <exclude name="**/quickrstart"/>
        </jar>

        <delete dir="${war.dir}/WEB-INF/default/templates"/>
        <delete dir="${war.dir}/themes"/>
    </target>

    <!-- =================================================================== -->
    <!-- Create the "quicker" start bundle                                 -->
    <!-- =================================================================== -->
    <target name="quickrstart" depends="clean-with-templates, compile" description="Create a deployable WAR file">
        <copy todir="${war.dir}/WEB-INF/themes">
            <fileset dir="${themes.dir}"/>
        </copy>

        <!--
            quickrstart properties needs to go into WEB-INF/classes
            quickrstart lib        needs to go into WEB-INF/lib
        -->

        <copy todir="${war.dir}/WEB-INF/classes" overwrite="true">
            <fileset dir="${basedir}/quickrstart/properties"/>
        </copy>

        <copy todir="${war.dir}/WEB-INF/lib">
            <fileset dir="${basedir}/quickrstart/lib"/>
        </copy>

        <jar jarfile="${war.file}" basedir="${war.dir}"/>
        <delete dir="${war.dir}/WEB-INF/default/templates"/>
        <delete dir="${war.dir}/themes"/>
    </target>

    <!-- =================================================================== -->
    <!-- Create the add-on bundle                                            -->
    <!-- =================================================================== -->
    <target name="create-addon-bundle" depends="compile-addon" description="Create the add-on bundle">
        <tstamp/>
        <zip zipfile="${distro.dir}/${name}-${version}-addons.zip">
            <fileset dir="${webinf.lib.dir}">
                <include name="${name}-addon-*.jar"/>
            </fileset>
            <fileset dir="${addon.lib.dir}">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${properties.dir}">
                <include name="oscache.properties"/>
            </fileset>
        </zip>
    </target>

    <!-- =================================================================== -->
    <!-- Create the templates bundle                                         -->
    <!-- =================================================================== -->
    <target name="create-templates-bundle" description="Create the templates bundle">
        <tstamp/>
        <zip zipfile="${distro.dir}/${name}-${version}-templates.zip">
            <fileset dir="${templates.dir}">
                <include name="**/*"/>
            </fileset>
        </zip>
    </target>

    <!-- =================================================================== -->
    <!-- Create the themes bundle                                            -->
    <!-- =================================================================== -->
    <target name="create-themes-bundle" description="Create the themes bundle">
        <tstamp/>
        <zip zipfile="${distro.dir}/${name}-${version}-themes.zip">
            <fileset dir="${themes.dir}">
                <include name="**/*"/>
            </fileset>
        </zip>
    </target>

    <!-- =================================================================== -->
    <!-- Create the TinyMCE bundle                                           -->
    <!-- =================================================================== -->
    <target name="create-tinymce-bundle" description="Create the TinyMCE bundle">
        <tstamp/>
        <zip zipfile="${distro.dir}/${name}-${version}-tinymce.zip">
            <fileset dir="${tinymce.dir}.dir}">
                <include name="**/*"/>
            </fileset>
        </zip>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the API documentation                                       -->
    <!-- =================================================================== -->
    <target name="javadoc" description="Creates the API documentation">
        <mkdir dir="${javadoc.dir}"/>
        <javadoc packagenames="org.*"
                 destdir="${javadoc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="${name} ${version} API"
                 doctitle="${name} ${version} API">
            <group
                    packages="org.*:org.blojsom.authorization.*:org.blojsom.blog.*:org.blojsom.dispatcher.*:org.blojsom.event.*:org.blojsom.fetcher.*:org.blojsom.filter.*:org.blojsom.servlet.*:org.blojsom.util.*:org.blojsom.util.resources.*"
                    title="blojsom core"/>
            <group packages="org.blojsom.extension.*"
                   title="blojsom extensions"/>
            <group packages="org.blojsom.plugin.*"
                   title="blojsom plugins"/>
            <classpath refid="build.classpath"/>
            <sourcepath refid="source.path"/>
        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the Velocity macro documentation                            -->
    <!-- =================================================================== -->
    <target name="velocidoc" description="Creates the Velocity macro documentation">
        <mkdir dir="${velocidoc.dir}"/>
        <java fork="true" jar="${ant.lib.dir}/velocidoc-0.2.jar">
            <arg line="-src ${pagemacros.dir} -dst ${velocidoc.dir}"/>
        </java>
    </target>

    <!-- ========================================================================= -->
    <!-- Creates a ZIP of the Velocity macro documentation for the blojsom website -->
    <!-- ========================================================================= -->
    <target name="velocidoc-archive" depends="velocidoc"
            description="Creates a ZIP of the Velocity macro documentation for the blojsom website">
        <mkdir dir="${distro.dir}"/>
        <zip zipfile="${velocidoc.zip}" basedir="${velocidoc.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Creates a ZIP of the documentation for the website                  -->
    <!-- =================================================================== -->
    <target name="website-docs" depends="javadoc" description="Creates a ZIP for the blojsom website">
        <mkdir dir="${distro.dir}"/>
        <zip zipfile="${javadocs.zip}" basedir="${docs.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Create a source distribution                                        -->
    <!-- =================================================================== -->
    <target name="create-source-distribution" depends="clean-with-templates"
            description="Creates the source distribution">
        <tstamp/>
        <mkdir dir="${compile.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${distro.dir}"/>
        <zip zipfile="${distro.dir}/${name}-${version}-source.zip">
            <zipfileset dir="${basedir}">
                <!-- Base files -->
                <include name="build.xml"/>
                <include name="LICENSE"/>
                <include name="README"/>

                <!-- Source directories -->
                <include name="addon/**"/>
                <include name="extensions/**"/>
                <include name="plugins/**"/>
                <include name="src/**"/>
                <include name="sql-scripts/**"/>

                <!-- Library directory -->
                <include name="lib/"/>
                <include name="addon-lib/"/>

                <!-- Properties directory -->
                <include name="properties/"/>

                <!-- Templates and themes -->
                <include name="templates/"/>
                <include name="themes/**"/>

                <!-- Upgrade utility directories -->
                <include name="upgrade/**"/>
                <include name="upgrade-lib/**"/>

                <!-- WAR directory -->
                <include name="war/"/>
                <include name="war/WEB-INF"/>
                <include name="war/WEB-INF/lib"/>
                <exclude name="war/WEB-INF/lib/blojsom*.jar"/>
            </zipfileset>
        </zip>
    </target>

    <!-- =================================================================== -->
    <!-- Create a distribution (add-ons, themes, templates, source)          -->
    <!-- =================================================================== -->
    <target name="create-distribution"
            depends="clean-with-templates, create-addon-bundle, create-source-distribution, create-themes-bundle, create-templates-bundle"
            description="Create the add-on bundle, themes and templates packages, and source distribution">
    </target>

    <!-- =================================================================== -->
    <!-- Compile the upgrade utility                                         -->
    <!-- =================================================================== -->
    <target name="compile-upgrade-utility" depends="prepare" description="Compile the upgrade utility">
        <mkdir dir="${compile.dir}"/>
        <!-- Upgrade -->
        <javac srcdir="${upgrade.src.dir}"
               destdir="${compile.dir}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               source="${source.version}"
               target="${target.version}">
            <classpath refid="build.classpath"/>
        </javac>
        <jar file="${upgrade.jar}" basedir="${compile.dir}"/>
        <delete dir="${compile.dir}"/>
    </target>

<!-- ================== Custom Ant Task Definitions ======================= -->


<!--

  These properties define custom tasks for the Ant build tool that interact
  with the "/manager" web application installed with Tomcat 6.  Before they
  can be successfully utilized, you must perform the following steps:

  - Copy the file "lib/catalina-ant.jar" from your Tomcat 6
    installation into the "lib" directory of your Ant installation.

  - Create a "build.properties" file in your application's top-level
    source directory (or your user login home directory) that defines
    appropriate values for the "manager.password", "manager.url", and
    "manager.username" properties described above.

  For more information about the Manager web application, and the functionality
  of these tasks, see <http://localhost:8080/tomcat-docs/manager-howto.html>.

-->

<taskdef name="list" classname="org.apache.catalina.ant.ListTask"/>
<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"/>
<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask"/>
<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"/>

<!-- ==================== Install Target ================================== -->

<!--

  The "install" target tells the specified Tomcat 6 installation to dynamically
  install this web application and make it available for execution.  It does
  *not* cause the existence of this web application to be remembered across
  Tomcat restarts; if you restart the server, you will need to re-install all
  this web application.

  If you have already installed this application, and simply want Tomcat to
  recognize that you have updated Java classes (or the web.xml file), use the
  "reload" target instead.

  NOTE:  This target will only succeed if it is run from the same server that
  Tomcat is running on.

  NOTE:  This is the logical opposite of the "remove" target.

-->

    <target name="install" depends="compile"
   description="Install application to servlet container">

        <deploy url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"
       localWar="file://${build.home}"/>

    </target>

    <target name="install-war"
   description="Install distro build to servlet container">

        <deploy url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"
       localWar="file://${war.file}"/>

    </target>


<!-- ====================== List Target =================================== -->

<!--

  The "list" target asks the specified Tomcat 6 installation to list the
  currently running web applications, either loaded at startup time or
  installed dynamically.  It is useful to determine whether or not the
  application you are currently developing has been installed.

-->

    <target name="list"
   description="List installed applications on servlet container">

        <list    url="${manager.url}"
        username="${manager.username}"
        password="${manager.password}"/>

    </target>

<!-- ==================== Reload Target =================================== -->

<!--

  The "reload" signals the specified application Tomcat 6 to shut itself down
  and reload. This can be useful when the web application context is not
  reloadable and you have updated classes or property files in the
  /WEB-INF/classes directory or when you have added or updated jar files in the
  /WEB-INF/lib directory.

  NOTE: The /WEB-INF/web.xml web application configuration file is not reread
  on a reload. If you have made changes to your web.xml file you must stop
  then start the web application.

-->

  <target name="reload" depends="compile"
   description="Reload application on servlet container">

    <reload url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"/>

  </target>



<!-- ==================== Remove Target =================================== -->

<!--

  The "remove" target tells the specified Tomcat 6 installation to dynamically
  remove this web application from service.

  NOTE:  This is the logical opposite of the "install" target.

-->

    <target name="remove"
   description="Remove application on servlet container">

        <undeploy url="${manager.url}"
         username="${manager.username}"
         password="${manager.password}"
             path="${app.path}"/>

    </target>



</project>

